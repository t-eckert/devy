CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- Users are accounts that can log into the site.
CREATE TABLE IF NOT EXISTS "user" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	username TEXT NOT NULL UNIQUE, -- A user must have a username, unique across the site.
	email TEXT NOT NULL UNIQUE,
	github_username TEXT UNIQUE,
	role TEXT NOT NULL DEFAULT 'user', -- Roles are used to determine what a user can do on the site.
	status TEXT NOT NULL DEFAULT 'active' 	-- A user may be active or inactive. Inactive users cannot log in.
);
CREATE TABLE IF NOT EXISTS "profile" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	user_id UUID NOT NULL REFERENCES "user" (id) ON DELETE CASCADE,

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	display_name TEXT,
	bio TEXT,
	avatar_url TEXT,
	website_url TEXT,
	twitter_username TEXT,
	github_username TEXT,
	
	status TEXT NOT NULL DEFAULT 'active', -- May be active or inactive. Inactive profiles cannot be viewed.
	visibility TEXT NOT NULL DEFAULT 'public', -- May be public or private. Private profiles cannot be viewed.

	is_deleted BOOLEAN NOT NULL DEFAULT FALSE,	-- May be deleted or not deleted. Deleted profiles cannot be viewed.
	is_locked BOOLEAN NOT NULL DEFAULT FALSE,	-- May be locked or unlocked. Locked profiles cannot be edited.
	is_featured BOOLEAN NOT NULL DEFAULT FALSE,	-- May be featured or not featured. Featured profiles are displayed on the home page.
	is_bot BOOLEAN NOT NULL DEFAULT FALSE,		-- May be a bot or not a bot. Bots are not displayed on the home page.
	is_sponsor BOOLEAN NOT NULL DEFAULT FALSE	-- May be a sponsor or not a sponsor. Sponsors are displayed on the home page.
);


-- Blogs are collections of posts which belong to a profile.
CREATE TABLE IF NOT EXISTS "blog" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	profile_id UUID NOT NULL REFERENCES "profile" (id) ON DELETE CASCADE, -- A blog must belong to a profile.

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	name TEXT NOT NULL,
	slug TEXT NOT NULL UNIQUE,
	description TEXT
);
CREATE TABLE IF NOT EXISTS "post" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	blog_id UUID NOT NULL REFERENCES "blog" (id) ON DELETE CASCADE, -- must belong to a blog

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	title TEXT NOT NULL,		-- must have a title
	slug TEXT NOT NULL UNIQUE,	-- must have a slug
	body TEXT NOT NULL			-- must have a body, formatted in Markdown
);
CREATE TABLE IF NOT EXISTS "tag" (
	value TEXT NOT NULL UNIQUE PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS "post_tag" (
	post_id UUID NOT NULL REFERENCES "post" (id) ON DELETE CASCADE,
	tag TEXT NOT NULL REFERENCES "tag" (value) ON DELETE CASCADE,

	PRIMARY KEY (post_id, tag)
);
-- Likes are a join on profiles and posts.
CREATE TABLE IF NOT EXISTS "like" (
	profile_id UUID NOT NULL REFERENCES "profile" (id) ON DELETE CASCADE,
	post_id UUID NOT NULL REFERENCES "post" (id) ON DELETE CASCADE,
	PRIMARY KEY (profile_id, post_id),

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
-- Bookmarks are a join on profiles and posts.
CREATE TABLE IF NOT EXISTS "bookmark" (
	profile_id UUID NOT NULL REFERENCES "profile" (id) ON DELETE CASCADE,
	post_id UUID NOT NULL REFERENCES "post" (id) ON DELETE CASCADE,
	PRIMARY KEY (profile_id, post_id),

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
CREATE TABLE IF NOT EXISTS "feed" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	name TEXT NOT NULL,

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	filter_tags TEXT[] DEFAULT '{}'::TEXT[],
	filter_profiles INTEGER[] DEFAULT '{}'::INTEGER[],
	filter_blogs INTEGER[] DEFAULT '{}'::INTEGER[],

	order_by TEXT DEFAULT 'created_at'::TEXT
);
CREATE TABLE IF NOT EXISTS "upload" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	previous_upload_id UUID REFERENCES "upload" (id) ON DELETE NO ACTION,

	status TEXT NOT NULL DEFAULT 'pending'::TEXT,
	repo TEXT NOT NULL,
	logs TEXT[] DEFAULT '{}'::TEXT[]
);

CREATE TABLE IF NOT EXISTS "webhook" (
	id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),

	received_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

	type TEXT NOT NULL,
	payload JSONB NOT NULL
)
ALTER TABLE "profile"
ADD CONSTRAINT "unique_user_id" UNIQUE (user_id);
